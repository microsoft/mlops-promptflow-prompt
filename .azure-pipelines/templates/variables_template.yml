parameters:
 - name: env_name
   displayName: "Execution Environment"
 - name: model_type
   displayName: "type of model to execute"

stages:
- stage: variable_generation
  jobs:
  - job: load_config_variables
    steps:
    - powershell: |
        $json = Get-Content -Raw -Path '$(System.DefaultWorkingDirectory)/config/model_config.json' | ConvertFrom-Json
        $firstElement = $json.flows | Where-Object {($_.PROMPT_FLOW_CONFIG_NAME -eq "${{ parameters.model_type }}") -and ($_.ENV_NAME -eq "${{ parameters.env_name }}")} | Select-Object -First 1
        
        foreach ($property in $firstElement.PSObject.Properties) {
          $pname = $property.Name
          $pvalue = $property.Value
          Write-Output "##vso[task.setvariable variable=$pname;isoutput=true]$pvalue"
          }
        
        $MODEL_NAME =  "${{ parameters.model_type }}" + "_" + "$($firstElement.MODEL_BASE_NAME)" + "_" + "${{parameters.env_name}}" + "_" + "$(Build.SourceBranchName)"
        Write-Output "##vso[task.setvariable variable=MODEL_NAME;isoutput=true]$MODEL_NAME"  
      name: loading_model_config

  - job: validate_assign_variables
    dependsOn: load_config_variables
    variables:
    - name:  PROMPT_FLOW_CONFIG_NAME
      value: $[ dependencies.load_config_variables.outputs['loading_model_config.PROMPT_FLOW_CONFIG_NAME'] ]    
    steps:
    - script: |
        if [ -z "$(PROMPT_FLOW_CONFIG_NAME)" ]
        then
          echo "variables are not available. Check parameter values or config json file for valid values.."
          exit 1
        else
          echo "variables were loaded from config file.."
          printenv
        fi
      name: validate_variable_load         
