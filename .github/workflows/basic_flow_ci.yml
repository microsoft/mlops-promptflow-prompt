---
name: Basic Flow CI Workflow

on:
  workflow_call:
  push:
    branches:
      # - "development"
      - "agromova/features/federated_action"
    paths:
      - '.github/**'
      - 'flows/function_basic_flow/**'
      - 'flows/class_basic_flow/**'
      - 'flows/yaml_basic_flow/**'
      - 'src/basic_func_impl/**'
      - 'src/basic_flow_fastapi_app/**'

env:
  PYTHON_VERSION: "3.9"
  # Setting an environment variable with the value of a configuration variable
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
  IMAGE_NAME: "basic-flow-image"
  SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
  CLIENT_ID: ${{ vars.CLIENT_ID }}
  TENANT_ID: ${{ vars.TENANT_ID }}

permissions:
  id-token: write
  contents: read
jobs:
  run-evaluation-full:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Export Secrets 
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}
          convert: upper

      - name: Configure DevOps Agent
        uses: ./.github/actions/configure_devops_agent          

      - name: Execute PF Evaluation Pipeline for Function Flow
        uses: ./.github/actions/execute_shell_code
        env:
          BUILD_BUILDID: "${{ github.run_id }}" # Match the expected name from Azure DevOps pipelines
          BUILD_SOURCEBRANCHNAME: ${{ github.head_ref || github.ref_name }}
        with:
          client_id: ${{ env.CLIENT_ID }}
          tenant_id: ${{ env.TENANT_ID }}
          subscription_id: ${{ env.SUBSCRIPTION_ID }}
          script_parameter: |
            python -m flows.function_basic_flow.evaluate.evaluate \
              --environment_name dev

      - name: Execute PF Evaluation Pipeline for Class Flow
        uses: ./.github/actions/execute_shell_code
        env:
          BUILD_BUILDID: "${{ github.run_id }}" # Match the expected name from Azure DevOps pipelines
          BUILD_SOURCEBRANCHNAME: ${{ github.head_ref || github.ref_name }}
        with:
          client_id: ${{ env.CLIENT_ID }}
          tenant_id: ${{ env.TENANT_ID }}
          subscription_id: ${{ env.SUBSCRIPTION_ID }}
          script_parameter: |
            python -m flows.class_basic_flow.evaluate.evaluate \
              --environment_name dev

      - name: Execute PF Evaluation Pipeline for YAML Flow
        uses: ./.github/actions/execute_shell_code
        env:
          BUILD_BUILDID: "${{ github.run_id }}" # Match the expected name from Azure DevOps pipelines
          BUILD_SOURCEBRANCHNAME: ${{ github.head_ref || github.ref_name }}
        with:
          client_id: ${{ env.CLIENT_ID }}
          tenant_id: ${{ env.TENANT_ID }}
          subscription_id: ${{ env.SUBSCRIPTION_ID }}
          script_parameter: |
            python -m flows.yaml_basic_flow.evaluate.evaluate \
              --environment_name dev

  run-online-deployment:
    runs-on: ubuntu-latest
    needs: run-evaluation-full
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Export Secrets 
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}
          convert: upper

      - name: Configure DevOps Agent
        uses: ./.github/actions/configure_devops_agent

      - name: Execute Online Deployment Script
        uses: ./.github/actions/execute_shell_code
        with:
          client_id: ${{ env.CLIENT_ID }}
          tenant_id: ${{ env.TENANT_ID }}
          subscription_id: ${{ env.SUBSCRIPTION_ID }}
          script_parameter: |
            python -m mlops.deployment.deploy_online_endpoint \
              --environment_name dev --flow_type function_basic_flow


  run-function-deployment:
    runs-on: ubuntu-latest
    needs: run-evaluation-full
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Export Secrets 
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}
          convert: upper

      - name: Copy Flow Files into Azure Function Folder
        run: |
            cp -R flows/function_basic_flow/standard/. src/basic_func_impl/function_basic_invoke_code
            cp -R flows/class_basic_flow/standard/. src/basic_func_impl/class_basic_invoke_code
            cp -R flows/yaml_basic_flow/standard/. src/basic_func_impl/yaml_basic_invoke_code
      
      - name: Compress Functions into Zip
        working-directory: ./src/basic_func_impl
        run: |
            zip build.zip * -r

      - name: Execute Azure Functions Deployment
        uses: ./.github/actions/execute_shell_code
        with:
          client_id: ${{ env.CLIENT_ID }}
          tenant_id: ${{ env.TENANT_ID }}
          subscription_id: ${{ env.SUBSCRIPTION_ID }}
          script_parameter: |
            az functionapp deployment source config-zip -g ${{ vars.RESOURCE_GROUP_NAME }} -n \
            ${{ vars.APP_NAME }} --src 'src/basic_func_impl/build.zip' \
            --build-remote true

            az functionapp config appsettings set --name ${{ vars.APP_NAME }} --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
            --settings "AZURE_OPENAI_DEPLOYMENT=gpt-35-turbo" \
            "AZURE_OPENAI_API_VERSION=2023-07-01-preview" \
            "AZURE_OPENAI_API_KEY=${{ secrets.AOAI_API_KEY }}" \
            "AZURE_OPENAI_ENDPOINT=${{ secrets.AOAI_BASE_ENDPOINT }}"

  run-aks-deployment:
    runs-on: ubuntu-latest
    needs: run-evaluation-full
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Export Secrets 
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}
          convert: upper

      - name: Execute Azure ACR Login
        uses: ./.github/actions/execute_shell_code
        with:
          client_id: ${{ env.CLIENT_ID }}
          tenant_id: ${{ env.TENANT_ID }}
          subscription_id: ${{ env.SUBSCRIPTION_ID }}
          run: |
            az acr login --name ${{ secrets.ACR_REGISTRY }} --username ${{ secrets.ACR_USER_NAME }} --password ${{ secrets.ACR_PASSWORD }}

      # - name: Build and push Docker image to Azure Container Registry
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     file: ./src/basic_flow_fastapi_app/Dockerfile
      #     push: true
      #     tags: ${{ secrets.ACR_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      # - name: 'Build and push image'
      #   uses: azure/docker-login@v1
      #   with:
      #     login-server: ${{ secrets.ACR_REGISTRY  }}
      #     username: ${{ secrets.ACR_USER_NAME }}
      #     password: ${{ secrets.ACR_PASSWORD }}
      # - run: |
      #     docker build -t ${{ secrets.ACR_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest -f ./src/basic_flow_fastapi_app/Dockerfile .
      #     docker push ${{ secrets.ACR_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.26'

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ vars.RESOURCE_GROUP_NAME }}
          cluster-name: ${{ vars.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Run kubectl
        run: |
          kubectl get pods

      - name: Create Secrets
        run: |
          kubectl delete secret aoai-secret -n basic-flow-app --ignore-not-found=true
          kubectl create secret generic aoai-secret \
            --from-literal=aoai-key=${{ secrets.AOAI_API_KEY }} \
            --from-literal=aoai-endpoint=${{ secrets.AOAI_BASE_ENDPOINT }} \
            --from-literal=aoai-deployment=gpt-35-turbo \
            --from-literal=aoai-version=2023-07-01-preview \
            -n basic-flow-app
          kubectl delete secret appinsights-connection-secret --ignore-not-found=true
          kubectl create secret generic appinsights-connection-secret \
            --from-literal=connection-string=${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}

      - name: Deploy OTel collector to AKS
        run: |
          # Deploy Cert-Manager
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml
          kubectl wait --for=condition=ready --timeout=60s -n cert-manager --all pods
          # Deploy OpenTelemetry Collector to AKS cluster
          kubectl apply -f https://github.com/open-telemetry/opentelemetry-operator/releases/download/v0.96.0/opentelemetry-operator.yaml # AKS OpenTelemetry Operator and Collector for AKS 
          kubectl wait --for=condition=ready --timeout=60s -n opentelemetry-operator-system --all pods
          kubectl apply -f src/otel_collector/otel-collector.yaml

      - name: Deploy to AKS
        uses: ./.github/actions/execute_shell_code
        with:
          client_id: ${{ env.CLIENT_ID }}
          tenant_id: ${{ env.TENANT_ID }}
          subscription_id: ${{ env.SUBSCRIPTION_ID }}
          run: |
            kubectl apply -f src/basic_flow_fastapi_app/deployment.yaml
            kubectl rollout status deployment/basic-flow-app-deployment -n basic-flow-app